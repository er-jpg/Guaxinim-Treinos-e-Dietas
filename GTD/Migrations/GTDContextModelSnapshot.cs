// <auto-generated />
using System;
using GTD.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GTD.Migrations
{
    [DbContext(typeof(GTDContext))]
    partial class GTDContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("GTD.Models.Diario", b =>
                {
                    b.Property<int?>("DiarioID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CompletoDieta");

                    b.Property<bool>("CompletoTreino");

                    b.Property<DateTime?>("DataDiario")
                        .IsRequired();

                    b.Property<string>("PlanoID");

                    b.Property<int?>("PlanoID1");

                    b.HasKey("DiarioID");

                    b.HasIndex("PlanoID1");

                    b.ToTable("Diario");
                });

            modelBuilder.Entity("GTD.Models.Dieta", b =>
                {
                    b.Property<int?>("DietaID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Completo");

                    b.Property<DateTime>("DataDieta");

                    b.Property<string>("DietaNome")
                        .IsRequired();

                    b.HasKey("DietaID");

                    b.ToTable("Dieta");
                });

            modelBuilder.Entity("GTD.Models.DietaSemana", b =>
                {
                    b.Property<int?>("DietaID");

                    b.Property<int?>("SemanaID");

                    b.Property<string>("DescDieta")
                        .IsRequired();

                    b.HasKey("DietaID", "SemanaID");

                    b.HasIndex("SemanaID");

                    b.ToTable("DietaSemana");
                });

            modelBuilder.Entity("GTD.Models.Infra.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("GTD.Models.Plano", b =>
                {
                    b.Property<int?>("PlanoID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId");

                    b.Property<bool>("Completo");

                    b.Property<int?>("DietaID");

                    b.Property<int>("Duracao");

                    b.Property<string>("PlanoNome")
                        .IsRequired();

                    b.Property<bool>("Selecionado");

                    b.Property<DateTime?>("SemanaInicio")
                        .IsRequired();

                    b.Property<int?>("TreinoID");

                    b.Property<string>("UserID");

                    b.HasKey("PlanoID");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("DietaID");

                    b.HasIndex("TreinoID");

                    b.ToTable("Plano");
                });

            modelBuilder.Entity("GTD.Models.Semana", b =>
                {
                    b.Property<int?>("SemanaID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DataFim")
                        .IsRequired();

                    b.Property<DateTime>("DataInicio");

                    b.Property<int>("SemanaNum");

                    b.HasKey("SemanaID");

                    b.ToTable("Semana");
                });

            modelBuilder.Entity("GTD.Models.Treino", b =>
                {
                    b.Property<int?>("TreinoID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Completo");

                    b.Property<DateTime?>("DataTreino")
                        .IsRequired();

                    b.Property<string>("TreinoNome")
                        .IsRequired();

                    b.HasKey("TreinoID");

                    b.ToTable("Treino");
                });

            modelBuilder.Entity("GTD.Models.TreinoSemana", b =>
                {
                    b.Property<int?>("TreinoID");

                    b.Property<int?>("SemanaID");

                    b.Property<string>("DescTreino")
                        .IsRequired();

                    b.HasKey("TreinoID", "SemanaID");

                    b.HasIndex("SemanaID");

                    b.ToTable("TreinoSemana");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GTD.Models.Diario", b =>
                {
                    b.HasOne("GTD.Models.Plano", "Plano")
                        .WithMany("Diario")
                        .HasForeignKey("PlanoID1");
                });

            modelBuilder.Entity("GTD.Models.DietaSemana", b =>
                {
                    b.HasOne("GTD.Models.Dieta", "Dieta")
                        .WithMany("DietaSemana")
                        .HasForeignKey("DietaID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GTD.Models.Semana", "Semana")
                        .WithMany("DietaSemana")
                        .HasForeignKey("SemanaID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GTD.Models.Plano", b =>
                {
                    b.HasOne("GTD.Models.Infra.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("GTD.Models.Dieta", "Dieta")
                        .WithMany("Plano")
                        .HasForeignKey("DietaID");

                    b.HasOne("GTD.Models.Treino", "Treino")
                        .WithMany("Plano")
                        .HasForeignKey("TreinoID");
                });

            modelBuilder.Entity("GTD.Models.TreinoSemana", b =>
                {
                    b.HasOne("GTD.Models.Semana", "Semana")
                        .WithMany("TreinoSemana")
                        .HasForeignKey("SemanaID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GTD.Models.Treino", "Treino")
                        .WithMany("TreinoSemana")
                        .HasForeignKey("TreinoID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GTD.Models.Infra.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GTD.Models.Infra.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GTD.Models.Infra.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GTD.Models.Infra.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
